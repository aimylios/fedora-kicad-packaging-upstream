=== modified file 'include/tool/coroutine.h'
--- include/tool/coroutine.h	2014-07-09 11:50:27 +0000
+++ include/tool/coroutine.h	2014-08-26 09:16:56 +0000
@@ -28,6 +28,7 @@
 #include <cstdlib>
 
 #include <boost/context/fcontext.hpp>
+#include <boost/version.hpp>
 
 #include "delegate.h"
 
@@ -86,6 +89,11 @@
         if( m_saved )
             delete m_saved;
 
+#if BOOST_VERSION >= 105600
+        if( m_self )
+            delete m_self;
+#endif
+
         if( m_stack )
             free( m_stack );
     }
@@ -99,7 +107,7 @@
      */
     void Yield()
     {
-        boost::context::jump_fcontext( m_self, m_saved, 0 );
+        jump( m_self, m_saved, 0 );
     }
 
     /**
@@ -111,7 +119,7 @@
     void Yield( ReturnType& aRetVal )
     {
         m_retVal = aRetVal;
-        boost::context::jump_fcontext( m_self, m_saved, 0 );
+        jump( m_self, m_saved, 0 );
     }
 
     /**
@@ -139,12 +145,17 @@ public:
         void* sp = (void*) ( ( ( (ptrdiff_t) m_stack ) + m_stackSize - 0xf ) & ( ~0x0f ) );
 
         m_args = &aArgs;
+#if BOOST_VERSION >= 105600
+        m_self = new boost::context::fcontext_t();
+        *m_self = boost::context::make_fcontext( sp, m_stackSize, callerStub );
+#else
         m_self = boost::context::make_fcontext( sp, m_stackSize, callerStub );
+#endif
         m_saved = new boost::context::fcontext_t();
 
         m_running = true;
         // off we go!
-        boost::context::jump_fcontext( m_saved, m_self, reinterpret_cast<intptr_t>( this ) );
+        jump( m_saved, m_self, reinterpret_cast<intptr_t>( this ) );
         return m_running;
     }
 
@@ -157,7 +176,7 @@
      */
     bool Resume()
     {
-        boost::context::jump_fcontext( m_saved, m_self, 0 );
+        jump( m_saved, m_self, 0 );
 
         return m_running;
     }
@@ -197,7 +215,18 @@
         cor->m_running = false;
 
         // go back to wherever we came from.
-        boost::context::jump_fcontext( cor->m_self, cor->m_saved, 0 );    // reinterpret_cast<intptr_t>( this ));
+        jump( cor->m_self, cor->m_saved, 0 );    // reinterpret_cast<intptr_t>( this ));
+    }
+
+    ///> Wrapper for jump_fcontext to assure compatibility between different boost versions
+    static inline intptr_t jump(boost::context::fcontext_t* aOld, boost::context::fcontext_t* aNew,
+                                intptr_t aP, bool aPreserveFPU = true )
+    {
+#if BOOST_VERSION >= 105600
+        return boost::context::jump_fcontext( aOld, *aNew, aP, aPreserveFPU );
+#else
+        return boost::context::jump_fcontext( aOld, aNew, aP, aPreserveFPU );
+#endif
     }
 
     template <typename T>

